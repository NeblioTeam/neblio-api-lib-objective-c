#import <Foundation/Foundation.h>
#import "SWGBroadcastTxResponse.h"
#import "SWGError.h"
#import "SWGGetAddressBalanceResponse.h"
#import "SWGGetAddressResponse.h"
#import "SWGGetAddressTotalReceivedResponse.h"
#import "SWGGetAddressTotalSentResponse.h"
#import "SWGGetAddressUnconfirmedBalanceResponse.h"
#import "SWGGetAddressUtxosResponse.h"
#import "SWGGetBlockIndexResponse.h"
#import "SWGGetBlockResponse.h"
#import "SWGGetRawTxResponse.h"
#import "SWGGetStatusResponse.h"
#import "SWGGetSyncResponse.h"
#import "SWGGetTxResponse.h"
#import "SWGGetTxsResponse.h"
#import "SWGSendTxRequest.h"
#import "SWGApi.h"

/**
* Neblio REST API Suite
* APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
*
* OpenAPI spec version: 1.2.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGTestnetInsightApi: NSObject <SWGApi>

extern NSString* kSWGTestnetInsightApiErrorDomain;
extern NSInteger kSWGTestnetInsightApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Returns address object
/// Returns NEBL address object containing information on a specific address
///
/// @param address Address
/// 
///  code:200 message:"Object containing address info"
///
/// @return SWGGetAddressResponse*
-(NSURLSessionTask*) testnetGetAddressWithAddress: (NSString*) address
    completionHandler: (void (^)(SWGGetAddressResponse* output, NSError* error)) handler;


/// Returns address balance in sats
/// Returns NEBL address balance in satoshis
///
/// @param address Address
/// 
///  code:200 message:"Address balance"
///
/// @return SWGGetAddressBalanceResponse*
-(NSURLSessionTask*) testnetGetAddressBalanceWithAddress: (NSString*) address
    completionHandler: (void (^)(SWGGetAddressBalanceResponse* output, NSError* error)) handler;


/// Returns total received by address in sats
/// Returns total NEBL received by address in satoshis
///
/// @param address Address
/// 
///  code:200 message:"Total received by address"
///
/// @return SWGGetAddressTotalReceivedResponse*
-(NSURLSessionTask*) testnetGetAddressTotalReceivedWithAddress: (NSString*) address
    completionHandler: (void (^)(SWGGetAddressTotalReceivedResponse* output, NSError* error)) handler;


/// Returns total sent by address in sats
/// Returns total NEBL sent by address in satoshis
///
/// @param address Address
/// 
///  code:200 message:"Total sent by address"
///
/// @return SWGGetAddressTotalSentResponse*
-(NSURLSessionTask*) testnetGetAddressTotalSentWithAddress: (NSString*) address
    completionHandler: (void (^)(SWGGetAddressTotalSentResponse* output, NSError* error)) handler;


/// Returns address unconfirmed balance in sats
/// Returns NEBL address unconfirmed balance in satoshis
///
/// @param address Address
/// 
///  code:200 message:"Address unconfirmed balance"
///
/// @return SWGGetAddressUnconfirmedBalanceResponse*
-(NSURLSessionTask*) testnetGetAddressUnconfirmedBalanceWithAddress: (NSString*) address
    completionHandler: (void (^)(SWGGetAddressUnconfirmedBalanceResponse* output, NSError* error)) handler;


/// Returns all UTXOs at a given address
/// Returns information on each Unspent Transaction Output contained at an address
///
/// @param address Address
/// 
///  code:200 message:"UTXOs at an address"
///
/// @return SWGGetAddressUtxosResponse*
-(NSURLSessionTask*) testnetGetAddressUtxosWithAddress: (NSString*) address
    completionHandler: (void (^)(SWGGetAddressUtxosResponse* output, NSError* error)) handler;


/// Returns information regarding a Neblio block
/// Returns blockchain data for a given block based upon the block hash
///
/// @param blockhash Block Hash
/// 
///  code:200 message:"Object containing all information on a blockchain block"
///
/// @return SWGGetBlockResponse*
-(NSURLSessionTask*) testnetGetBlockWithBlockhash: (NSString*) blockhash
    completionHandler: (void (^)(SWGGetBlockResponse* output, NSError* error)) handler;


/// Returns block hash of block
/// Returns the block hash of a block at a given block index
///
/// @param blockindex Block Index
/// 
///  code:200 message:"Object containing block hash"
///
/// @return SWGGetBlockIndexResponse*
-(NSURLSessionTask*) testnetGetBlockIndexWithBlockindex: (NSNumber*) blockindex
    completionHandler: (void (^)(SWGGetBlockIndexResponse* output, NSError* error)) handler;


/// Returns raw transaction hex
/// Returns raw transaction hex representing a NEBL transaction
///
/// @param txid Transaction ID
/// 
///  code:200 message:"Object containing raw hex of transaction"
///
/// @return SWGGetRawTxResponse*
-(NSURLSessionTask*) testnetGetRawTxWithTxid: (NSString*) txid
    completionHandler: (void (^)(SWGGetRawTxResponse* output, NSError* error)) handler;


/// Utility API for calling several blockchain node functions
/// tility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
///
/// @param q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)
/// 
///  code:200 message:"Function Response"
///
/// @return SWGGetStatusResponse*
-(NSURLSessionTask*) testnetGetStatusWithQ: (NSString*) q
    completionHandler: (void (^)(SWGGetStatusResponse* output, NSError* error)) handler;


/// Get node sync status
/// Returns information on the node's sync progress
///
/// 
///  code:200 message:"Sync Info"
///
/// @return SWGGetSyncResponse*
-(NSURLSessionTask*) testnetGetSyncWithCompletionHandler: 
    (void (^)(SWGGetSyncResponse* output, NSError* error)) handler;


/// Returns transaction object
/// Returns NEBL transaction object representing a NEBL transaction
///
/// @param txid Transaction ID
/// 
///  code:200 message:"Object containing transaction info"
///
/// @return SWGGetTxResponse*
-(NSURLSessionTask*) testnetGetTxWithTxid: (NSString*) txid
    completionHandler: (void (^)(SWGGetTxResponse* output, NSError* error)) handler;


/// Get transactions by block or address
/// Returns all transactions by block or address
///
/// @param address Address (optional)
/// @param block Block Hash (optional)
/// @param page Page number to display (optional)
/// 
///  code:200 message:"List of transactions"
///
/// @return SWGGetTxsResponse*
-(NSURLSessionTask*) testnetGetTxsWithAddress: (NSString*) address
    block: (NSString*) block
    page: (NSNumber*) page
    completionHandler: (void (^)(SWGGetTxsResponse* output, NSError* error)) handler;


/// Broadcasts a signed raw transaction to the network (not NTP1 specific)
/// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
///
/// @param body Object representing a transaction to broadcast
/// 
///  code:200 message:"An object containing the TXID if the broadcast was successful",
///  code:0 message:"Unexpected error"
///
/// @return SWGBroadcastTxResponse*
-(NSURLSessionTask*) testnetSendTxWithBody: (SWGSendTxRequest*) body
    completionHandler: (void (^)(SWGBroadcastTxResponse* output, NSError* error)) handler;



@end
