#import <Foundation/Foundation.h>
#import "OAIBroadcastTxRequest.h"
#import "OAIBroadcastTxResponse.h"
#import "OAIBurnTokenRequest.h"
#import "OAIBurnTokenResponse.h"
#import "OAIError.h"
#import "OAIGetAddressInfoResponse.h"
#import "OAIGetTokenHoldersResponse.h"
#import "OAIGetTokenIdResponse.h"
#import "OAIGetTokenMetadataResponse.h"
#import "OAIGetTransactionInfoResponse.h"
#import "OAIIssueTokenRequest.h"
#import "OAIIssueTokenResponse.h"
#import "OAISendTokenRequest.h"
#import "OAISendTokenResponse.h"
#import "OAIApi.h"

/**
* Neblio REST API Suite
* APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
*
* OpenAPI spec version: 1.2.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAITestnetNTP1Api: NSObject <OAIApi>

extern NSString* kOAITestnetNTP1ApiErrorDomain;
extern NSInteger kOAITestnetNTP1ApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Broadcasts a signed raw transaction to the network
/// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
///
/// @param broadcastTxRequest Object representing a transaction to broadcast
/// 
///  code:200 message:"An object containing the TXID if the broadcast was successful",
///  code:0 message:"Unexpected error"
///
/// @return OAIBroadcastTxResponse*
-(NSURLSessionTask*) testnetBroadcastTxWithBroadcastTxRequest: (OAIBroadcastTxRequest*) broadcastTxRequest
    completionHandler: (void (^)(OAIBroadcastTxResponse* output, NSError* error)) handler;


/// Builds a transaction that burns an NTP1 Token
/// Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
///
/// @param burnTokenRequest Object representing the token to be burned
/// 
///  code:200 message:"An object representing the tx to burn the token",
///  code:0 message:"Unexpected error"
///
/// @return OAIBurnTokenResponse*
-(NSURLSessionTask*) testnetBurnTokenWithBurnTokenRequest: (OAIBurnTokenRequest*) burnTokenRequest
    completionHandler: (void (^)(OAIBurnTokenResponse* output, NSError* error)) handler;


/// Information On a Neblio Address
/// Returns both NEBL and NTP1 token UTXOs held at the given address. 
///
/// @param address Neblio Address to get information on.
/// 
///  code:200 message:"An object with an array of UTXOs for this address",
///  code:0 message:"Unexpected error"
///
/// @return OAIGetAddressInfoResponse*
-(NSURLSessionTask*) testnetGetAddressInfoWithAddress: (NSString*) address
    completionHandler: (void (^)(OAIGetAddressInfoResponse* output, NSError* error)) handler;


/// Get Addresses Holding a Token
/// Returns the the the addresses holding a token and how many tokens are held 
///
/// @param tokenid TokenId to request metadata for
/// 
///  code:200 message:"An object containing all of the addresses holding a token",
///  code:0 message:"Unexpected error"
///
/// @return OAIGetTokenHoldersResponse*
-(NSURLSessionTask*) testnetGetTokenHoldersWithTokenid: (NSString*) tokenid
    completionHandler: (void (^)(OAIGetTokenHoldersResponse* output, NSError* error)) handler;


/// Returns the tokenId representing a token
/// Translates a token symbol to a tokenId if a token exists with that symbol on the network 
///
/// @param tokensymbol Token symbol
/// 
///  code:200 message:"Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned."
///
/// @return OAIGetTokenIdResponse*
-(NSURLSessionTask*) testnetGetTokenIdWithTokensymbol: (NSString*) tokensymbol
    completionHandler: (void (^)(OAIGetTokenIdResponse* output, NSError* error)) handler;


/// Get Issuance Metadata of Token
/// Returns the metadata associated with a token at time of issuance. 
///
/// @param tokenid TokenId to request metadata for
/// 
///  code:200 message:"An object containing the metadata of a token at issuance",
///  code:0 message:"Unexpected error"
///
/// @return OAIGetTokenMetadataResponse*
-(NSURLSessionTask*) testnetGetTokenMetadataOfIssuanceWithTokenid: (NSString*) tokenid
    completionHandler: (void (^)(OAIGetTokenMetadataResponse* output, NSError* error)) handler;


/// Get UTXO Metadata of Token
/// Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
///
/// @param tokenid TokenId to request metadata for
/// @param utxo Specific UTXO to request metadata for
/// 
///  code:200 message:"An object containing the metadata of a token for a UTXO",
///  code:0 message:"Unexpected error"
///
/// @return OAIGetTokenMetadataResponse*
-(NSURLSessionTask*) testnetGetTokenMetadataOfUtxoWithTokenid: (NSString*) tokenid
    utxo: (NSString*) utxo
    completionHandler: (void (^)(OAIGetTokenMetadataResponse* output, NSError* error)) handler;


/// Information On an NTP1 Transaction
/// Returns detailed information regarding an NTP1 transaction. 
///
/// @param txid Neblio txid to get information on.
/// 
///  code:200 message:"An object represending this transaction",
///  code:0 message:"Unexpected error"
///
/// @return OAIGetTransactionInfoResponse*
-(NSURLSessionTask*) testnetGetTransactionInfoWithTxid: (NSString*) txid
    completionHandler: (void (^)(OAIGetTransactionInfoResponse* output, NSError* error)) handler;


/// Builds a transaction that issues a new NTP1 Token
/// Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
///
/// @param issueTokenRequest Object representing the token to be created
/// 
///  code:200 message:"An object representing the token created",
///  code:0 message:"Unexpected error"
///
/// @return OAIIssueTokenResponse*
-(NSURLSessionTask*) testnetIssueTokenWithIssueTokenRequest: (OAIIssueTokenRequest*) issueTokenRequest
    completionHandler: (void (^)(OAIIssueTokenResponse* output, NSError* error)) handler;


/// Builds a transaction that sends an NTP1 Token
/// Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
///
/// @param sendTokenRequest Object representing the token to be sent
/// 
///  code:200 message:"An object representing the tx to send the token",
///  code:0 message:"Unexpected error"
///
/// @return OAISendTokenResponse*
-(NSURLSessionTask*) testnetSendTokenWithSendTokenRequest: (OAISendTokenRequest*) sendTokenRequest
    completionHandler: (void (^)(OAISendTokenResponse* output, NSError* error)) handler;



@end
