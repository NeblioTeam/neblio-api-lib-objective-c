#import <Foundation/Foundation.h>
#import "NEBLBroadcastTxRequest.h"
#import "NEBLBroadcastTxResponse.h"
#import "NEBLBurnTokenRequest.h"
#import "NEBLBurnTokenResponse.h"
#import "NEBLError.h"
#import "NEBLGetAddressInfoResponse.h"
#import "NEBLGetTokenHoldersResponse.h"
#import "NEBLGetTokenIdResponse.h"
#import "NEBLGetTokenMetadataResponse.h"
#import "NEBLGetTransactionInfoResponse.h"
#import "NEBLIssueTokenRequest.h"
#import "NEBLIssueTokenResponse.h"
#import "NEBLSendTokenRequest.h"
#import "NEBLSendTokenResponse.h"
#import "NEBLApi.h"

/**
* Neblio REST API Suite
* APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
*
* OpenAPI spec version: 1.2.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface NEBLNTP1Api: NSObject <NEBLApi>

extern NSString* kNEBLNTP1ApiErrorDomain;
extern NSInteger kNEBLNTP1ApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(NEBLApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Broadcasts a signed raw transaction to the network
/// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
///
/// @param broadcastTxRequest Object representing a transaction to broadcast
/// 
///  code:200 message:"An object containing the TXID if the broadcast was successful",
///  code:0 message:"Unexpected error"
///
/// @return NEBLBroadcastTxResponse*
-(NSURLSessionTask*) broadcastTxWithBroadcastTxRequest: (NEBLBroadcastTxRequest*) broadcastTxRequest
    completionHandler: (void (^)(NEBLBroadcastTxResponse* output, NSError* error)) handler;


/// Builds a transaction that burns an NTP1 Token
/// Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
///
/// @param burnTokenRequest Object representing the token to be burned
/// 
///  code:200 message:"An object representing the tx to burn the token",
///  code:0 message:"Unexpected error"
///
/// @return NEBLBurnTokenResponse*
-(NSURLSessionTask*) burnTokenWithBurnTokenRequest: (NEBLBurnTokenRequest*) burnTokenRequest
    completionHandler: (void (^)(NEBLBurnTokenResponse* output, NSError* error)) handler;


/// Information On a Neblio Address
/// Returns both NEBL and NTP1 token UTXOs held at the given address. 
///
/// @param address Neblio Address to get information on.
/// 
///  code:200 message:"An object with an array of UTXOs for this address",
///  code:0 message:"Unexpected error"
///
/// @return NEBLGetAddressInfoResponse*
-(NSURLSessionTask*) getAddressInfoWithAddress: (NSString*) address
    completionHandler: (void (^)(NEBLGetAddressInfoResponse* output, NSError* error)) handler;


/// Get Addresses Holding a Token
/// Returns the the the addresses holding a token and how many tokens are held 
///
/// @param tokenid TokenId to request metadata for
/// 
///  code:200 message:"An object containing all of the addresses holding a token",
///  code:0 message:"Unexpected error"
///
/// @return NEBLGetTokenHoldersResponse*
-(NSURLSessionTask*) getTokenHoldersWithTokenid: (NSString*) tokenid
    completionHandler: (void (^)(NEBLGetTokenHoldersResponse* output, NSError* error)) handler;


/// Returns the tokenId representing a token
/// Translates a token symbol to a tokenId if a token exists with that symbol on the network 
///
/// @param tokensymbol Token symbol
/// 
///  code:200 message:"Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned."
///
/// @return NEBLGetTokenIdResponse*
-(NSURLSessionTask*) getTokenIdWithTokensymbol: (NSString*) tokensymbol
    completionHandler: (void (^)(NEBLGetTokenIdResponse* output, NSError* error)) handler;


/// Get Metadata of Token
/// Returns the metadata associated with a token. 
///
/// @param tokenid TokenId to request metadata for
/// 
///  code:200 message:"An object containing the metadata of a token",
///  code:0 message:"Unexpected error"
///
/// @return NEBLGetTokenMetadataResponse*
-(NSURLSessionTask*) getTokenMetadataWithTokenid: (NSString*) tokenid
    completionHandler: (void (^)(NEBLGetTokenMetadataResponse* output, NSError* error)) handler;


/// Get UTXO Metadata of Token
/// Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
///
/// @param tokenid TokenId to request metadata for
/// @param utxo Specific UTXO to request metadata for
/// 
///  code:200 message:"An object containing the metadata of a token for a UTXO",
///  code:0 message:"Unexpected error"
///
/// @return NEBLGetTokenMetadataResponse*
-(NSURLSessionTask*) getTokenMetadataOfUtxoWithTokenid: (NSString*) tokenid
    utxo: (NSString*) utxo
    completionHandler: (void (^)(NEBLGetTokenMetadataResponse* output, NSError* error)) handler;


/// Information On an NTP1 Transaction
/// Returns detailed information regarding an NTP1 transaction. 
///
/// @param txid Neblio txid to get information on.
/// 
///  code:200 message:"An object represending this transaction",
///  code:0 message:"Unexpected error"
///
/// @return NEBLGetTransactionInfoResponse*
-(NSURLSessionTask*) getTransactionInfoWithTxid: (NSString*) txid
    completionHandler: (void (^)(NEBLGetTransactionInfoResponse* output, NSError* error)) handler;


/// Builds a transaction that issues a new NTP1 Token
/// Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
///
/// @param issueTokenRequest Object representing the token to be created
/// 
///  code:200 message:"An object representing the token created",
///  code:0 message:"Unexpected error"
///
/// @return NEBLIssueTokenResponse*
-(NSURLSessionTask*) issueTokenWithIssueTokenRequest: (NEBLIssueTokenRequest*) issueTokenRequest
    completionHandler: (void (^)(NEBLIssueTokenResponse* output, NSError* error)) handler;


/// Builds a transaction that sends an NTP1 Token
/// Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
///
/// @param sendTokenRequest Object representing the token to be sent
/// 
///  code:200 message:"An object representing the tx to send the token",
///  code:0 message:"Unexpected error"
///
/// @return NEBLSendTokenResponse*
-(NSURLSessionTask*) sendTokenWithSendTokenRequest: (NEBLSendTokenRequest*) sendTokenRequest
    completionHandler: (void (^)(NEBLSendTokenResponse* output, NSError* error)) handler;



@end
